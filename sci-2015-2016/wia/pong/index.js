// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var DownArrow, H, UpArrow, W, ai, aiScore, audio, ball, canvas, counter, ctx, draw, init, keystate, main, player, playerScore, update;
    W = 700;
    H = 600;
    UpArrow = 38;
    DownArrow = 40;
    canvas = void 0;
    ctx = void 0;
    keystate = void 0;
    counter = 0;
    playerScore = 0;
    aiScore = 0;
    player = {
      x: null,
      y: null,
      width: 20,
      height: 100,
      update: function() {
        if (keystate[UpArrow]) {
          this.y -= 7;
        }
        if (keystate[DownArrow]) {
          this.y += 7;
        }
        return this.y = Math.max(Math.min(this.y, H - this.height), 0);
      },
      draw: function() {
        return ctx.fillRect(this.x, this.y, this.width, this.height);
      }
    };
    ai = {
      x: null,
      y: null,
      width: 20,
      height: 100,
      update: function() {
        var dest;
        dest = ball.y - ((this.height - ball.side) * 0.5);
        this.y += (dest - this.y) * 0.1;
        return this.y = Math.max(Math.min(this.y, H - this.height), 0);
      },
      draw: function() {
        return ctx.fillRect(this.x, this.y, this.width, this.height);
      }
    };
    ball = {
      x: null,
      y: null,
      vel: null,
      side: 20,
      speed: 12,
      serve: function(side) {
        var phi, r;
        r = Math.random();
        this.x = side === 1 ? player.x + player.width : ai.x - this.side;
        this.y = (H - this.side) * r;
        phi = 0.1 * Math.PI * (1 - (2 * r));
        return this.vel = {
          x: side * this.speed * Math.cos(phi),
          y: this.speed * Math.sin(phi)
        };
      },
      update: function() {
        var AABBIntersect, n, offset, pdle, phi, smash;
        this.x += this.vel.x;
        this.y += this.vel.y;
        if (0 > this.y || this.y + this.side > H) {
          offset = this.vel.y < 0 ? 0 - this.y : H - (this.y + this.side);
          this.y += 2 * offset;
          this.vel.y *= -1;
        }
        AABBIntersect = function(ax, ay, aw, ah, bx, By, bw, bh) {
          return ax < bx + bw && ay < By + bh && bx < ax + aw && By < ay + ah;
        };
        pdle = this.vel.x < 0 ? player : ai;
        if (AABBIntersect(pdle.x, pdle.y, pdle.width, pdle.height, this.x, this.y, this.side, this.side)) {
          this.x = pdle === player ? player.x + player.width : ai.x - this.side;
          n = (this.y + this.side - pdle.y) / (pdle.height + this.side);
          phi = 0.25 * Math.PI * (2 * n - 1);
          smash = Math.abs(phi) > 0.2 * Math.PI ? 1.5 : 1;
          this.vel.x = smash * (pdle === player ? 1 : -1) * this.speed * Math.cos(phi);
          this.vel.y = smash * this.speed * Math.sin(phi);
        }
        if (0 > this.x + this.side) {
          aiScore += 1000;
          $('#aiScore').text('Bot: ' + aiScore);
          console.log('Bot scored.');
          this.serve(pdle === player ? 1 : -1);
        }
        if (this.x > W) {
          playerScore += 1000;
          $('#playerScore').text('You: ' + playerScore);
          console.log('Player scored.');
          return this.serve(pdle === player ? 1 : -1);
        }
      },
      draw: function() {
        return ctx.fillRect(this.x, this.y, this.side, this.side);
      }
    };
    main = function() {
      var mainLoop;
      canvas = document.createElement('canvas');
      canvas.width = W;
      canvas.height = H;
      ctx = canvas.getContext('2d');
      document.body.appendChild(canvas);
      keystate = {};
      document.addEventListener('keydown', function(evt) {
        keystate[evt.keyCode] = true;
      });
      document.addEventListener('keyup', function(evt) {
        delete keystate[evt.keyCode];
      });
      init();
      mainLoop = function() {
        update();
        draw();
        window.requestAnimationFrame(mainLoop, canvas);
      };
      window.requestAnimationFrame(mainLoop, canvas);
    };
    init = function() {
      player.x = player.width;
      player.y = (H - player.height) / 2;
      ai.x = W - (player.width + ai.width);
      ai.y = (H - ai.height) / 2;
      ball.serve(1);
    };
    update = function() {
      var colors;
      ball.update();
      player.update();
      ai.update();
      colors = ['pink', 'red', 'blue', 'white', 'black', 'green', 'violet'];
      if (counter > 1) {
        $('body').css('background-color', colors[Math.floor(Math.random() * colors.length)]);
        counter = 0;
      }
      return counter++;
    };
    draw = function() {
      ctx.fillStyle = 'violet';
      ctx.fillRect(0, 0, W, H);
      ctx.save();
      ctx.fillStyle = 'pink';
      ball.draw();
      player.draw();
      ai.draw();
      return ctx.restore();
    };
    main();
    audio = new Audio('muzyczka.mp3');
    return audio.play();
  });

}).call(this);
